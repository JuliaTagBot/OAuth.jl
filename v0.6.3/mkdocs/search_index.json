{
    "docs": [
        {
            "location": "/", 
            "text": "My interpretation of the OAuth 1.0 protocol, based on my reading of \nRFC5849\n, the \nliboauth\n C library and factoring out the OAuth authentication code from \nTwitter.jl\n. At one point, this package relied on liboauth and was a wrapper of that library's functions built using \nClang.jl\n; however, as I cleaned up the auto-generated functions from Clang, I decided that it would be easier and cleaner to re-write the library in Julia rather than require liboauth.\n\n\nThis is still a work-in-progress, but works as a replacement for the authentication in the Twitter.jl package, so it should be fairly complete in its implementation.\n\n\n- [Functions](index.md#Functions-1)\n- [Index](index.md#Index-1)\n\n\n\n\n\nFunctions\n\n\n#\n\n\nOAuth.encodeURI!\n \n \nMethod\n.\n\n\nencodeURI!(dict_of_parameters::Dict)\n\n\n\n\nMutates dict_of_parameters using \nencodeURI\n on strings.\n\n\nExamples\n\n\njulia\n encodeURI!(Dict(\niv\n =\n 10, \ns\n =\n \nvalue!\n))\nDict{String,Any} with 2 entries:\n  \niv\n =\n 10\n  \ns\n  =\n \nvalue%21\n\n\n\n\n\nsource\n\n\n#\n\n\nOAuth.encodeURI\n \n \nMethod\n.\n\n\nencodeURI(s)\n\n\n\n\nConvenience function for \nHTTP.escapeuri\n.\n\n\nExamples\n\n\njulia\n encodeURI(\nhello, world!\n)\n\nhello%2C%20world%21\n\n\n\n\n\nsource\n\n\n#\n\n\nOAuth.oauth_body_hash_data\n \n \nMethod\n.\n\n\noauth_body_hash_data(data::String)\n\n\n\n\nReturns \noauth_body_hash=\n along with base64 encoded SHA-1 from input.\n\n\nExamples\n\n\njulia\n oauth_body_hash_data(\nHello, World!\n)\n\noauth_body_hash=CgqfKmdylCVXq1NV12r0Qvj2XgE=\n\n\n\n\n\nsource\n\n\n#\n\n\nOAuth.oauth_body_hash_encode\n \n \nMethod\n.\n\n\noauth_body_hash_encode(data::String)\n\n\n\n\nConvenience function for SHA-1 and base64 encoding.\n\n\nExamples\n\n\njulia\n oauth_body_hash_encode(\njulialang\n)\n\nLsztg2byou89Y8lBoH3G8v3vjbw=\n\n\n\n\n\nsource\n\n\n#\n\n\nOAuth.oauth_body_hash_file\n \n \nMethod\n.\n\n\noauth_body_hash_file(filename::String)\n\n\n\n\nReturns \noauth_body_hash=\n along with base64 encoded SHA-1 from input text file.\n\n\nExamples\n\n\njulia\n oauth_body_hash_file(joinpath(Pkg.dir(), \nOAuth/test/auth_body_hash_file.txt\n))\n\noauth_body_hash=CgqfKmdylCVXq1NV12r0Qvj2XgE=\n\n\n\n\n\nsource\n\n\n#\n\n\nOAuth.oauth_header\n \n \nMethod\n.\n\n\nfunction oauth_header(httpmethod, baseurl, options, oauth_consumer_key, oauth_consumer_secret, oauth_token, oauth_token_secret; oauth_signature_method = \nHMAC-SHA1\n, oauth_version = \n1.0\n)\n\n\n\n\nBuilds OAuth header, defaulting to OAuth 1.0. Function assumes \noptions\n has already been run through \nencodeURI!\n.\n\n\nsource\n\n\n#\n\n\nOAuth.oauth_nonce\n \n \nMethod\n.\n\n\noauth_nonce(length::Int)\n\n\n\n\nReturns a random string of a given length.\n\n\nExamples\n\n\njulia\n oauth_nonce(10)\n\naQb2FVkrYi\n\n\n\n\n\nsource\n\n\n#\n\n\nOAuth.oauth_percent_encode_keys!\n \n \nMethod\n.\n\n\noauth_percent_encode_keys!(options::Dict)\n\n\n\n\nReturns dict where keys and values are URL-encoded.\n\n\nExamples\n\n\njulia\n oauth_percent_encode_keys!(Dict(\nkey 1\n =\n \nvalue1\n, \nkey    2\n =\n \nvalue 2\n))\nDict{String,String} with 2 entries:\n  \nkey%20%20%20%202\n =\n \nvalue%202\n\n  \nkey%201\n          =\n \nvalue1\n\n\n\n\n\nsource\n\n\n#\n\n\nOAuth.oauth_request_resource\n \n \nMethod\n.\n\n\noauth_request_resource(endpoint::String, httpmethod::String, options::Dict, oauth_consumer_key::String, oauth_consumer_secret::String, oauth_token::String, oauth_token_secret::String)\n\n\n\n\nMakes \nGET\n or \nPOST\n call to OAuth API.\n\n\nsource\n\n\n#\n\n\nOAuth.oauth_serialize_url_parameters\n \n \nMethod\n.\n\n\noauth_serialize_url_parameters(options::Dict)\n\n\n\n\nReturns query string by concatenating dictionary keys/values.\n\n\nExamples\n\n\njulia\n oauth_serialize_url_parameters(Dict(\nfoo\n =\n \nbar\n, \nfoo 1\n =\n \nhello!\n))\n\nfoo=bar\nfoo 1=hello!\n\n\n\n\n\nsource\n\n\n#\n\n\nOAuth.oauth_sign_hmac_sha1\n \n \nMethod\n.\n\n\noauth_sign_hmac_sha1(message::String, signingkey::String)\n\n\n\n\nTakes a message and signing key, converts to a SHA-1 digest, then encodes to base64.\n\n\nExamples\n\n\njulia\n oauth_sign_hmac_sha1(\nfoo\n, \nbar\n)\n\nhdFVxV7ShqMAvRzxJN4I2H6RTzo=\n\n\n\n\n\nsource\n\n\n#\n\n\nOAuth.oauth_signature_base_string\n \n \nMethod\n.\n\n\noauth_signature_base_string(httpmethod::String, url::String, parameterstring::String)\n\n\n\n\nReturns encoded HTTP method, url and parameters.\n\n\nExamples\n\n\njulia\n oauth_signature_base_string(\nPOST\n, \nhttps://julialang.org\n, \nfoo\nbar\n)\n\nPOST\nhttps%3A%2F%2Fjulialang.org\nfoo%26bar\n\n\n\n\n\nsource\n\n\n#\n\n\nOAuth.oauth_signing_key\n \n \nMethod\n.\n\n\noauth_signing_key(oauth_consumer_secret::String, oauth_token_secret::String)\n\n\n\n\nReturns a signing key based on a consumer secret and token secret.\n\n\nExamples\n\n\njulia\n oauth_signing_key(\nfoo\n, \nbar\n)\n\nfoo\nbar\n\n\n\n\n\nsource\n\n\n#\n\n\nOAuth.oauth_timestamp\n \n \nMethod\n.\n\n\noauth_timestamp()\n\n\n\n\nReturns current unix timestamp as String.\n\n\nExamples\n\n\njulia\n oauth_timestamp()\n\n1512235859\n\n\n\n\n\nsource\n\n\n\n\nIndex\n\n\n\n\nOAuth.encodeURI\n\n\nOAuth.encodeURI!\n\n\nOAuth.oauth_body_hash_data\n\n\nOAuth.oauth_body_hash_encode\n\n\nOAuth.oauth_body_hash_file\n\n\nOAuth.oauth_header\n\n\nOAuth.oauth_nonce\n\n\nOAuth.oauth_percent_encode_keys!\n\n\nOAuth.oauth_request_resource\n\n\nOAuth.oauth_serialize_url_parameters\n\n\nOAuth.oauth_sign_hmac_sha1\n\n\nOAuth.oauth_signature_base_string\n\n\nOAuth.oauth_signing_key\n\n\nOAuth.oauth_timestamp", 
            "title": "Home"
        }, 
        {
            "location": "/#functions", 
            "text": "#  OAuth.encodeURI!     Method .  encodeURI!(dict_of_parameters::Dict)  Mutates dict_of_parameters using  encodeURI  on strings.  Examples  julia  encodeURI!(Dict( iv  =  10,  s  =   value! ))\nDict{String,Any} with 2 entries:\n   iv  =  10\n   s   =   value%21   source  #  OAuth.encodeURI     Method .  encodeURI(s)  Convenience function for  HTTP.escapeuri .  Examples  julia  encodeURI( hello, world! ) hello%2C%20world%21   source  #  OAuth.oauth_body_hash_data     Method .  oauth_body_hash_data(data::String)  Returns  oauth_body_hash=  along with base64 encoded SHA-1 from input.  Examples  julia  oauth_body_hash_data( Hello, World! ) oauth_body_hash=CgqfKmdylCVXq1NV12r0Qvj2XgE=   source  #  OAuth.oauth_body_hash_encode     Method .  oauth_body_hash_encode(data::String)  Convenience function for SHA-1 and base64 encoding.  Examples  julia  oauth_body_hash_encode( julialang ) Lsztg2byou89Y8lBoH3G8v3vjbw=   source  #  OAuth.oauth_body_hash_file     Method .  oauth_body_hash_file(filename::String)  Returns  oauth_body_hash=  along with base64 encoded SHA-1 from input text file.  Examples  julia  oauth_body_hash_file(joinpath(Pkg.dir(),  OAuth/test/auth_body_hash_file.txt )) oauth_body_hash=CgqfKmdylCVXq1NV12r0Qvj2XgE=   source  #  OAuth.oauth_header     Method .  function oauth_header(httpmethod, baseurl, options, oauth_consumer_key, oauth_consumer_secret, oauth_token, oauth_token_secret; oauth_signature_method =  HMAC-SHA1 , oauth_version =  1.0 )  Builds OAuth header, defaulting to OAuth 1.0. Function assumes  options  has already been run through  encodeURI! .  source  #  OAuth.oauth_nonce     Method .  oauth_nonce(length::Int)  Returns a random string of a given length.  Examples  julia  oauth_nonce(10) aQb2FVkrYi   source  #  OAuth.oauth_percent_encode_keys!     Method .  oauth_percent_encode_keys!(options::Dict)  Returns dict where keys and values are URL-encoded.  Examples  julia  oauth_percent_encode_keys!(Dict( key 1  =   value1 ,  key    2  =   value 2 ))\nDict{String,String} with 2 entries:\n   key%20%20%20%202  =   value%202 \n   key%201           =   value1   source  #  OAuth.oauth_request_resource     Method .  oauth_request_resource(endpoint::String, httpmethod::String, options::Dict, oauth_consumer_key::String, oauth_consumer_secret::String, oauth_token::String, oauth_token_secret::String)  Makes  GET  or  POST  call to OAuth API.  source  #  OAuth.oauth_serialize_url_parameters     Method .  oauth_serialize_url_parameters(options::Dict)  Returns query string by concatenating dictionary keys/values.  Examples  julia  oauth_serialize_url_parameters(Dict( foo  =   bar ,  foo 1  =   hello! )) foo=bar foo 1=hello!   source  #  OAuth.oauth_sign_hmac_sha1     Method .  oauth_sign_hmac_sha1(message::String, signingkey::String)  Takes a message and signing key, converts to a SHA-1 digest, then encodes to base64.  Examples  julia  oauth_sign_hmac_sha1( foo ,  bar ) hdFVxV7ShqMAvRzxJN4I2H6RTzo=   source  #  OAuth.oauth_signature_base_string     Method .  oauth_signature_base_string(httpmethod::String, url::String, parameterstring::String)  Returns encoded HTTP method, url and parameters.  Examples  julia  oauth_signature_base_string( POST ,  https://julialang.org ,  foo bar ) POST https%3A%2F%2Fjulialang.org foo%26bar   source  #  OAuth.oauth_signing_key     Method .  oauth_signing_key(oauth_consumer_secret::String, oauth_token_secret::String)  Returns a signing key based on a consumer secret and token secret.  Examples  julia  oauth_signing_key( foo ,  bar ) foo bar   source  #  OAuth.oauth_timestamp     Method .  oauth_timestamp()  Returns current unix timestamp as String.  Examples  julia  oauth_timestamp() 1512235859   source", 
            "title": "Functions"
        }, 
        {
            "location": "/#index", 
            "text": "OAuth.encodeURI  OAuth.encodeURI!  OAuth.oauth_body_hash_data  OAuth.oauth_body_hash_encode  OAuth.oauth_body_hash_file  OAuth.oauth_header  OAuth.oauth_nonce  OAuth.oauth_percent_encode_keys!  OAuth.oauth_request_resource  OAuth.oauth_serialize_url_parameters  OAuth.oauth_sign_hmac_sha1  OAuth.oauth_signature_base_string  OAuth.oauth_signing_key  OAuth.oauth_timestamp", 
            "title": "Index"
        }
    ]
}